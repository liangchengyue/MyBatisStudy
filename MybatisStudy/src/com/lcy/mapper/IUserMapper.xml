<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用是对SQL进行分类化管理 -->
<!--注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址 -->
<mapper namespace="com.lcy.mapper.IUserMapper">
	<!-- 用户信息综合查询 -->
	<!-- #{userCustom.sex}:取出pojo包装对象中性别的值 -->
	<!-- ${userCustom.username}:取出pojo包装对象中用户名称值 -->
	<select id="findUserList" parameterType="com.lcy.vo.UserQuer" resultType="com.lcy.pojo.UserCustom">
		SELECT * FROM user WHERE
		user.sex=#{userCustom.sex} AND user.username LIKE
		'%${userCustom.username}%'
	</select>
	<!--在映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过select执行数据库查询 -->
	<!-- id:标识映射文件中的sql -->
	<!-- 将sql语句封装到mappedStatement对象中，所以将id称为statement的id -->
	<!-- parameterType：指定输入参数的类型，这里指定int型 -->
	<!-- #{}表示一个占位符号 -->
	<!-- #{id}：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或其他名称 -->
	<!-- resultType:指定sql输出结果所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象 -->
	<select id="findUserById" parameterType="int" resultType="com.lcy.pojo.User">
		SELECT
		* FROM user WHERE id=#{id}
	</select>
	<!-- 根据用户名称模糊查询查询用户信息,可能返回多条 -->
	<!-- resultType：指定就是单条记录所映射的java对象类型 -->
	<!-- ${}:表示拼接SQL串，将接收到参数的内容不加任何修饰拼接在sql中 -->
	<!-- 使用${}拼接SQL会导致SQL注入 -->
	<!-- ${value}：接收输入参数的内容，如果传入的是简单类型，${}中只能是value -->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="com.lcy.pojo.User">
		SELECT * FROM user WHERE username LIKE '%${value}%'
	</select>
	<!-- 添加用户 -->
	<!-- parameterType：指定输入参数类型是pojo(包括用户信息) -->
	<!-- #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
	<insert id="insertUser" parameterType="com.lcy.pojo.User">
		<!-- 将插入数据的主键返回，返回到user对象中 -->
		<!-- SELECT LAST_INSERT_ID():得到刚insert进去记录的主键值，只适用于自增主键 -->
		<!-- keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性 -->
		<!-- order:SELECT LAST_INSERT_ID()的执行顺序，相对于insert语句来说它的执行顺序 -->
		<!--resultType:指定SELECT LAST_INSERT_ID()的结果类型 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		INSERT INTO
		user(username,birthday,sex,address)
		VALUE(#{username},#{birthday},#{sex},#{address});
		<!-- 使用MySQL的UUID()生成主键 -->
		<!-- 执行过程： -->
		<!-- 首先通过uuid()得到主键，将主键设置到user对象的id属性中 -->
		<!-- 其次在insert执行时，从user对象中取出id属性值 -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"> -->
		<!--SELECT -->
		<!--uuid() -->
		<!--</selectKey> -->
		<!--INSERT INTO -->
		<!--user(id,username,birthday,sex,address) -->
		<!--VALUE(#{id},#{username},#{birthday},#{sex},#{address}); -->
	</insert>
	<!-- 删除用户 -->
	<!-- 根据id删除用户，需要输入id值 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		DELETE FROM user WHERE
		id=#{id}
	</delete>
	<!-- 根据id更新用户 -->
	<!-- 分析： -->
	<!-- 需要传入用户的id -->
	<!-- 需要传入用户的更新信息 -->
	<!-- parameterType指定user对象，包括id和更新信息，注意：id必须存在 -->
	<!-- #{id}：从输入user对象中获取id属性值 -->
	<update id="updateUser" parameterType="com.lcy.pojo.User">
		UPDATE user SET
		username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
		WHERE id=#{id}
	</update>
</mapper>
